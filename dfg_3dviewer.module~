<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_help().
 */
function wisski_iip_image_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.wisski_iip_image':
      return '<p>' . t('This is the WissKI module for the integration ' .
        'of IIP (https://iipimage.sourceforge.io/).') . '</p>';
  }
}


function wisski_iip_image_preprocess_colorbox_formatter(&$variables) {
#  dpm($variables);
  $iu = $variables['image']['#uri'];

  $prerendered_paths = \Drupal::config('wisski_iip_image.settings')->get('wisski_iip_image_prerendered_path');

  $nuri = NULL;
  if(!empty($prerendered_paths)) {
    foreach($prerendered_paths as $prerendered_path) {
      $nuri = $prerendered_path . $variables['image']['#alt'];

      if(file_exists($nuri))
        break;
      $nuri = NULL;
    }
  }

  if(empty($nuri)) {
    $style = ImageStyle::load('wisski_pyramid');
    if(empty($style)) {
      $service = \Drupal::service('image.toolkit.manager');
      $toolkit = $service->getDefaultToolkit();
#      dpm($toolkit);
#      $config = $this->configFactory->getEditable('imagemagick.settings');
      
      if(empty($toolkit) || $toolkit->getPluginId() !== "imagemagick") {
        \Drupal::messenger()->addError('Your default toolkit is not imagemagick. Please use imagemagick for this module.');
        return;
      }
      
      $config = \Drupal::service('config.factory')->getEditable('imagemagick.settings');
      
      $formats = $config->get('image_formats');
      
      if(!isset($formats["PTIF"])) {
        \Drupal::messenger()->addStatus("PTIF was not a valid image format. We enabled it for you. Make sure it is supported by your imagemagick configuration.");
        $formats["PTIF"] = array('mime_type' => "image/tiff", "enabled" => TRUE);
        $config->set('image_formats', $formats);
        $config->save();
      }
      

      $image_style_name = 'wisski_pyramid';

      if(! $image_style = ImageStyle::load($image_style_name)) {
        $values = array('name'=>$image_style_name,'label'=>'Wisski Pyramid Style');
        $image_style = ImageStyle::create($values);
        $image_style->addImageEffect(array('id' => 'WisskiPyramidalTiffImageEffect'));
        $image_style->save();
      }
      $style = $image_style;
    }
    $nuri = $style->buildUri($iu);
  }
#  dpm($variables);
  if(isset($variables['settings']['wisski_inline']) && $variables['settings']['wisski_inline'] === "1") {
    $variables['attributes']['wisski-inline-iip'] = "1";
    $variables['attributes']['class'] = ['wisski-inline-iip'];
    $variables['url'] = '#/';
  }

  if(strpos($nuri, "public://") !== FALSE)
    $nuri = str_replace("public://", \Drupal::service('file_system')->realpath("public://"). '/', $nuri);

  $variables['attributes']['iip'] = $nuri;
  
}

function wisski_iip_image_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
#  dpm($element);  
  if(isset($element['#value_callback']) && in_array('Drupal\image\Plugin\Field\FieldWidget\ImageWidget', $element['#value_callback'])) {
#    dpm($element);
    $entity_type = 'wisski_individual';
    // this seems evil... 
    // and it really was - was not working for subbundles -.-
    // $bundle = $form_state->getBuildInfo()['callback_object']->getEntity()->bundle();

    // however this does not seem less evil...
    if(!empty($element['#field_parents']))
      $bundle = $element['#field_parents'][0];
    else
      $bundle = $form_state->getBuildInfo()['callback_object']->getEntity()->bundle();

    $field_name = $element['#field_name'];

    $bundle_fields = \Drupal::getContainer()->get('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
    $field_definition = isset($bundle_fields[$field_name]) ? $bundle_fields[$field_name] : NULL;

    if(!empty($field_definition)) {

      $image_factory = \Drupal::service('image.factory');
      $supported_extensions = $image_factory->getSupportedExtensions();
    
      $element['#upload_validators']['file_validate_extensions'][0] = implode(' ', $supported_extensions);    

      // set the field settings accordingly for validation!
      $field_definition->setSetting("file_extensions", implode(' ', $supported_extensions));
      $field_definition->save();
    }
  }

}

#function wisski_iip_image_file_validate(Drupal\file\FileInterface $file) {
#  drupal_set_message("Hallo Welt!");
#}

function wisski_iip_image_theme_registry_alter(&$theme_registry) {
#  dpm($theme_registry);
#  $theme_registry['colorbox_formatter']['template'] = 'wisskiiip-colorbox-formatter';
  $theme_registry['colorbox_formatter']['path'] = drupal_get_path('module', 'wisski_iip_image') . '/templates';
}

